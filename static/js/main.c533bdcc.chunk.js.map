{"version":3,"sources":["common/enums/user-swipe.enum.ts","common/consts/router-paths.const.ts","common/services/user-storage.service.ts","common/services/fingerprint.service.ts","common/transport/transport.ts","common/transport/syndicate.transport.ts","common/utils/get-unique-url.ts","common/utils/encode-decode-data.ts","pages/main-page/components/choose-item.style.ts","pages/main-page/components/choose-item.tsx","pages/main-page/main-page.service.ts","pages/main-page/main-page.tsx","common/hooks/use-rx.hook.ts","pages/result-page.tsx","syndicate-page.tsx","index.tsx"],"names":["UserSwipe","hashedData","reactRouterReplacing","routerPaths","MAIN","USER_CHOOSE_RESULTS","UserStorageService","cache","storage","window","localStorage","item","this","getUserChoiseData","then","userChoise","setData","cached","getFromCache","Promise","resolve","rawData","getItem","KEY","deserialized","JSON","parse","error","oldData","newData","serialized","stringify","setItem","setToCache","data","userStorageService","fingerPrintService","fingerprintJS","load","userFingerprint","agent","get","result","visitorId","transport","instance","axios","create","url","config","toServer","post","require","SyndicateTransport","fingerPrint","request","ENDPOINT","headers","syndicateTransport","getUniqueUserUrl","userChoiseData","param","btoa","getEncodedUserData","location","hostname","pathname","replace","getHashedUrl","chooseItemStyle","css","display","ChooseItem","onChoose","handleSelect","React","useCallback","SELECT","handleReject","REJECT","className","id","img","swipe","onClick","mainPageService","items$","BehaviorSubject","handleChooseItem","selected","chooseResult","setUserChoise","isValueSetted","newItems","getValue","map","next","sendItems","getFingerPrint","sendUserForm","getItems","items","itemsFromStorage","mapped","finded","find","value","MainPage","stream","useState","setValue","useEffect","subscription","subscribe","nextValue","unsubscribe","useRx","sorted","rejected","other","forEach","push","length","ResultPage","useParams","decoded","atob","getDecodedUserData","filter","SyndicatePage","basename","process","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c533bdcc.chunk.js","sourcesContent":["export enum UserSwipe {\n  REJECT = 'reject',\n  SELECT = 'select'\n}\n","export const hashedData = 'hashedData';\n\nconst reactRouterReplacing = `:${hashedData}`;\n\nexport const routerPaths = {\n  MAIN: '/',\n  USER_CHOOSE_RESULTS: `/results/:${hashedData}`\n};\n\nexport function getHashedUrl(data: string): string {\n  return routerPaths.USER_CHOOSE_RESULTS.replace(reactRouterReplacing, data);\n}\n","import { UserSwipe } from '../enums';\n\nexport type TUserChoiseItem = {\n  id: string;\n  img: string;\n  swipe: UserSwipe;\n};\n\nexport type TUserChoiseData = Array<TUserChoiseItem>;\n\nclass UserStorageService {\n  private static KEY: string = 'data';\n  private cache: TUserChoiseData | null = null;\n  private storage = window.localStorage;\n\n  setUserChoise(item: TUserChoiseItem): Promise<boolean> {\n    return this.getUserChoiseData().then((userChoise: TUserChoiseData | null) => this.setData(userChoise || [], item));\n  }\n\n  getUserChoiseData(): Promise<TUserChoiseData | null> {\n    const cached = this.getFromCache();\n\n    if (cached) return Promise.resolve(cached);\n\n    const rawData = this.storage.getItem(UserStorageService.KEY);\n\n    if (rawData) {\n      try {\n        const deserialized = JSON.parse(rawData) as TUserChoiseData;\n\n        return Promise.resolve(deserialized);\n      } catch (error: unknown) {\n        return Promise.resolve(null);\n      }\n    }\n\n    return Promise.resolve(null);\n  }\n\n  private setData(oldData: TUserChoiseData, item: TUserChoiseItem): Promise<boolean> {\n    const newData = [...oldData, item];\n\n    try {\n      const serialized = JSON.stringify(newData);\n\n      try {\n        this.storage.setItem(UserStorageService.KEY, serialized);\n        this.setToCache(newData);\n\n        return Promise.resolve(true);\n      } catch (error: unknown) {\n        return Promise.resolve(false);\n      }\n    } catch (error: unknown) {\n      return Promise.resolve(false);\n    }\n  }\n\n  private getFromCache(): TUserChoiseData | null {\n    return this.cache;\n  }\n\n  private setToCache(data: TUserChoiseData): void {\n    this.cache = data;\n  }\n}\n\nexport const userStorageService = new UserStorageService();\n","import { Agent, GetResult, load } from '@fingerprintjs/fingerprintjs';\n\nclass FingerPrintService {\n  private fingerprintJS = load();\n  private userFingerprint: string = '';\n\n  getFingerPrint(): Promise<string> {\n    if (!this.userFingerprint) {\n      return this.fingerprintJS.then((agent: Agent) => agent.get().then((result: GetResult) => {\n        this.userFingerprint = result.visitorId;\n\n        return this.userFingerprint;\n      }));\n    }\n\n    return Promise.resolve(this.userFingerprint);\n  }\n}\n\nexport const fingerPrintService = new FingerPrintService();\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nclass Transport {\n  private instance = axios.create();\n\n  public get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n    return this.instance.get(url, config).then(({ data }: AxiosResponse<T>) => data);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public post<T>(url: string, toServer?: any, config?: AxiosRequestConfig): Promise<T> {\n    return this.instance.post(url, toServer, config).then(({ data }: AxiosResponse<T>) => data);\n  }\n}\n\nexport const transport = new Transport();\n","import { transport } from './transport';\nimport { TItem } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../data/data.json') as Array<TItem>;\n\nclass SyndicateTransport {\n  private static ENDPOINT: string =\n  'https://script.google.com/macros/s/AKfycbws_tdDX8nAFL2j5Q1OHnvo5TCFqXN8werBTNnnqNyfWNdTe-TYzxXX4xNZAPcYEqhV/exec';\n\n  sendUserForm(fingerPrint: string, url: string): Promise<void> {\n    const request = { fingerPrint, url };\n\n    return transport.post(\n      SyndicateTransport.ENDPOINT,\n      request,\n      { headers: { 'Content-Type': 'text/plain;charset=utf-8' } }\n    );\n  }\n\n  getItems(): Promise<Array<TItem>> {\n    return Promise.resolve(data );\n  }\n}\n\nexport const syndicateTransport = new SyndicateTransport();\n","import { getEncodedUserData } from './encode-decode-data';\nimport { getHashedUrl } from '../consts';\nimport { TUserChoiseData } from '../services';\n\nexport function getUniqueUserUrl(userChoiseData: TUserChoiseData): string {\n  const param = getEncodedUserData(userChoiseData);\n\n  return `${window.location.hostname + window.location.pathname}#${getHashedUrl(param)}`;\n}\n","import { TUserChoiseData } from '../services';\n\nexport function getEncodedUserData(data: TUserChoiseData): string {\n  const serialized = JSON.stringify(data);\n\n  return window.btoa(serialized);\n}\n\nexport function getDecodedUserData(data: string): TUserChoiseData {\n  const serialized = window.atob(data);\n\n  return JSON.parse(serialized) as TUserChoiseData;\n}\n","import { css } from '@emotion/css';\n\nexport const chooseItemStyle = css({\n  display: 'flex'\n});\n","import { UserSwipe } from 'common';\nimport React from 'react';\nimport { chooseItemStyle } from './choose-item.style';\nimport { TUserItem } from '../main-page.service';\n\ntype TChooseItemProps = {\n  item: TUserItem;\n  onChoose: (item: TUserItem, swipe: UserSwipe) => void;\n};\n\nexport function ChooseItem({ item, onChoose }: TChooseItemProps): JSX.Element {\n  const handleSelect = React.useCallback(() => onChoose(item, UserSwipe.SELECT), [item, onChoose]);\n  const handleReject = React.useCallback(() => onChoose(item, UserSwipe.REJECT), [item, onChoose]);\n\n  return (\n    <div className={chooseItemStyle}>\n      <div>{`id: ${item.id} - img: ${item.img}`}</div>\n      {\n        !item.swipe && (\n          <>\n            <button onClick={handleSelect}>ВЫБРАТЬ</button>\n            <button onClick={handleReject}>ОТВЕРГНУТЬ</button>\n          </>\n        )\n      }\n    </div>\n  );\n}\n","import {\n  UserSwipe,\n  TItem,\n  syndicateTransport,\n  userStorageService,\n  TUserChoiseData,\n  fingerPrintService,\n  getUniqueUserUrl,\n  TUserChoiseItem\n} from 'common';\nimport { BehaviorSubject } from 'rxjs';\n\nexport type TUserItem = TItem & { swipe: UserSwipe | null };\nexport type TUserItems = Array<TUserItem>;\n\nclass MainPageService {\n  readonly items$: BehaviorSubject<TUserItems> = new BehaviorSubject<TUserItems>([]);\n\n  getItems(): void {\n    void syndicateTransport.getItems().then((items: Array<TItem>) => {\n      void userStorageService.getUserChoiseData().then((itemsFromStorage: TUserChoiseData | null) => {\n        if (itemsFromStorage) {\n          const mapped = items.map((item: TItem) => {\n            const finded = itemsFromStorage\n              .find((value: TUserChoiseItem) => value.id === item.id && value.img === item.img);\n\n            return finded ? finded : { ...item, swipe: null };\n          });\n\n          this.items$.next(mapped);\n\n          return;\n        }\n\n        const mapped = items.map((item: TItem) => ({ ...item, swipe: null }));\n\n        this.items$.next(mapped);\n      });\n    });\n  }\n\n  handleChooseItem = (selected: TUserItem, swipe: UserSwipe): void => {\n    const chooseResult = { ...selected, swipe };\n\n    void userStorageService.setUserChoise(chooseResult).then((isValueSetted: boolean) => {\n      if (isValueSetted) {\n        const items = this.items$.getValue();\n        const newItems = items.map((item: TUserItem) => item === selected ? chooseResult : item);\n\n        this.items$.next(newItems);\n      }\n    });\n  };\n\n  sendItems = (): void => {\n    void userStorageService.getUserChoiseData().then((result: TUserChoiseData | null) => {\n      if (result) {\n        void fingerPrintService.getFingerPrint().then((fingerPrint: string) => {\n          const url = getUniqueUserUrl(result);\n\n          void syndicateTransport.sendUserForm(fingerPrint, url);\n        });\n      }\n    });\n  };\n}\n\nexport const mainPageService = new MainPageService();\n\n","import { UserSwipe } from 'common';\nimport { useRx } from 'common/hooks';\nimport React from 'react';\nimport { ChooseItem } from './components';\nimport { mainPageService, TUserItem } from './main-page.service';\n\nexport function MainPage(): JSX.Element {\n  const items = useRx(mainPageService.items$);\n\n  React.useEffect(() => {\n    mainPageService.getItems();\n  }, []);\n\n  const sorted = {\n    selected: [] as Array<TUserItem>,\n    rejected: [] as Array<TUserItem>,\n    other: [] as Array<TUserItem>\n  };\n\n  items.forEach((item: TUserItem) => {\n    if (!item.swipe) sorted.other.push(item);\n    if (item.swipe === UserSwipe.SELECT) sorted.selected.push(item);\n    if (item.swipe === UserSwipe.REJECT) sorted.rejected.push(item);\n  });\n\n  if (!items.length) return <>Загрузка данных да</>;\n\n  return (\n    <div>\n      <p>Невыбранные</p>\n      {sorted.other\n        .map((item: TUserItem) =>\n          <ChooseItem key={`${item.id}-${item.img}`} item={item} onChoose={mainPageService.handleChooseItem} />)\n      }\n      <p>Выбранные</p>\n      {sorted.selected\n        .map((item: TUserItem) =>\n          <ChooseItem key={`${item.id}-${item.img}`} item={item} onChoose={mainPageService.handleChooseItem} />)\n      }\n      <p>Отвергнутые</p>\n      {sorted.rejected\n        .map((item: TUserItem) =>\n          <ChooseItem key={`${item.id}-${item.img}`} item={item} onChoose={mainPageService.handleChooseItem} />)\n      }\n      <div>\n        <button onClick={mainPageService.sendItems}>Отправить данные в таблицу</button>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { BehaviorSubject } from 'rxjs';\n\nexport function useRx<T>(stream: BehaviorSubject<T>): T {\n  const [value, setValue] = useState<T>((): T => stream.getValue());\n\n  useEffect(() => {\n    const subscription = stream.subscribe((nextValue: T) => setValue(nextValue));\n\n    return () => subscription.unsubscribe();\n  }, [stream]);\n\n  return value;\n}\n","import { getDecodedUserData, TUserChoiseItem, UserSwipe } from 'common';\nimport React from 'react';\nimport { useParams } from 'react-router';\n\ntype TMainPageParams = {\n  hashedData?: string;\n};\n\nexport function ResultPage(): JSX.Element {\n  const { hashedData } = useParams<TMainPageParams>();\n\n  if (!hashedData) return <>Пустоо</>;\n\n  const decoded = getDecodedUserData(hashedData);\n\n  return (\n    <div>\n      <p>Выбранные</p>\n      {decoded.filter((item: TUserChoiseItem) => item.swipe === UserSwipe.SELECT).map((item: TUserChoiseItem) => (\n        <div key={item.id + item.img}>\n          {`id: ${item.id} - img: ${item.img}`}\n        </div>\n      ))}\n      <p>Отвергнутые</p>\n      {decoded.filter((item: TUserChoiseItem) => item.swipe === UserSwipe.REJECT).map((item: TUserChoiseItem) => (\n        <div key={item.id + item.img}>\n          {`id: ${item.id} - img: ${item.img}`}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { routerPaths } from 'common';\nimport { MainPage, ResultPage } from 'pages';\nimport React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nexport function SyndicatePage(): JSX.Element {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={routerPaths.MAIN} exact component={MainPage} />\n        <Route path={routerPaths.USER_CHOOSE_RESULTS} component={ResultPage} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SyndicatePage } from './syndicate-page';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SyndicatePage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}